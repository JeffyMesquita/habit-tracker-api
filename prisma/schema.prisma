// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "../docs/assets/erd.svg"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String

  verified  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  profile                 Profile?
  address                 Address?
  habits                  Habit[]
  PremiumSubscription     PremiumSubscription?
  DailyHabitProgress      DailyHabitProgress[]
  DailyProgressSummary    DailyProgressSummary[]
  HabitStreak             HabitStreak[]
  UserMetrics             UserMetrics[]
  UserGoals               UserGoals[]
  UserActivityLog         UserActivityLog[]
  Achievements            Achievements[]
  UserPreferences         UserPreferences[]
  UserInteractions        UserInteractions[]
  NotificationPreferences NotificationPreferences?
  UserDevice              UserDevice[]
  NotificationLog         NotificationLog[]

  @@map("users")
}

model Role {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("roles")
}

model Profile {
  id         String    @id @default(uuid())
  firstName  String?
  lastName   String?
  avatarUrl  String?
  bio        String?
  occupation String?
  birthdate  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("profiles")
}

model PremiumSubscription {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  startDate   DateTime  @default(now())
  months      Int       @default(1)
  renewalDate DateTime
  lastRenewal DateTime?

  @@map("premium_subscriptions")
}

model ConfirmEmail {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  attempts  Int      @default(0)
  code      String
  expiresAt DateTime

  @@map("confirm_emails")
}

model ResetPassword {
  id           String   @id @default(uuid())
  userId       String
  email        String
  tempPassword String
  createdAt    DateTime @default(now())

  @@map("reset_passwords")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("refresh_tokens")
}

model Address {
  id      String  @id @default(uuid())
  city    String?
  state   String?
  country String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("addresses")
}

model Habit {
  id        String    @id @default(uuid())
  title     String
  category  String?
  frequency Int?
  moment    DateTime?

  createdAt DateTime
  updatedAt DateTime @updatedAt

  dayHabits DayHabit[]
  weekDays  HabitWeekDays[]

  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  DailyHabitProgress DailyHabitProgress[]
  HabitStreak        HabitStreak[]

  @@unique([userId, title])
  @@map("habits")
}

model HabitWeekDays {
  id      String @id @default(uuid())
  habitId String
  weekDay Int

  habit Habit @relation(fields: [habitId], references: [id])

  @@unique([habitId, weekDay])
  @@map("habit_week_days")
}

model Day {
  id   String   @id @default(uuid())
  date DateTime

  dayHabits DayHabit[]

  @@unique([date])
  @@map("days")
}

model DayHabit {
  id String @id @default(uuid())

  dayId   String
  habitId String

  day   Day   @relation(fields: [dayId], references: [id])
  habit Habit @relation(fields: [habitId], references: [id])

  @@unique([dayId, habitId])
  @@map("day_habits")
}

model DailyHabitProgress {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  habit          Habit    @relation(fields: [habitId], references: [id])
  habitId        String
  date           DateTime
  completedCount Int

  @@map("daily_habit_progress")
}

model DailyProgressSummary {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  date            DateTime
  totalHabits     Int
  completedHabits Int

  @@map("daily_progress_summary")
}

model HabitStreak {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  habit     Habit?   @relation(fields: [habitId], references: [id])
  habitId   String?
  startDate DateTime
  endDate   DateTime

  @@map("habit_streaks")
}

model UserMetrics {
  id                    String @id @default(uuid())
  user                  User   @relation(fields: [userId], references: [id])
  userId                String
  averageCompletionRate Float
  longestStreak         Int

  @@map("user_metrics")
}

model UserGoals {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  goalType    String
  targetValue Int
  startDate   DateTime
  endDate     DateTime
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_goals")
}

model UserFeedback {
  id           String   @id @default(uuid())
  userId       String?
  feedbackType String
  timestamp    DateTime @default(now())
  comments     String?

  @@map("user_feedback")
}

model UserActivityLog {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  activityType String
  timestamp    DateTime @default(now())
  details      String?

  @@map("user_activity_log")
}

model Achievements {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  achievementType String
  timestamp       DateTime @default(now())

  @@map("achievements")
}

model UserPreferences {
  id                   String  @id @default(uuid())
  user                 User    @relation(fields: [userId], references: [id])
  userId               String
  notificationSettings Json?
  theme                String?

  @@map("user_preferences")
}

model UserInteractions {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  interactionType String
  timestamp       DateTime @default(now())
  details         String?

  @@map("user_interactions")
}

model UserSurveyResponses {
  id         String   @id @default(uuid())
  userId     String?
  surveyType String
  questionId String
  response   String
  timestamp  DateTime @default(now())

  @@map("user_survey_responses")
}

// Notification System Models
model NotificationPreferences {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Canais habilitados
  emailEnabled Boolean @default(true)
  pushEnabled  Boolean @default(true)
  smsEnabled   Boolean @default(false)

  // Tipos de notificação
  habitReminders   Boolean @default(true)
  achievements     Boolean @default(true)
  weeklyReports    Boolean @default(true)
  monthlyReports   Boolean @default(true)
  inactivityAlerts Boolean @default(true)
  streakWarnings   Boolean @default(true)

  // Configurações avançadas
  quietHoursStart String @default("22:00")
  quietHoursEnd   String @default("08:00")
  timezone        String @default("America/Sao_Paulo")
  language        String @default("pt-BR")
  frequency       String @default("immediate") // immediate, batched, digest

  // Configurações específicas
  habitReminderFrequency String @default("once") // once, twice, multiple
  inactivityThreshold    Int    @default(3) // dias
  streakWarningHours     Int    @default(6) // horas antes do deadline

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notification_preferences")
}

model UserDevice {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Device Info
  deviceToken String  @unique
  platform    String // ios, android, web
  deviceType  String // phone, tablet, desktop
  appVersion  String?
  osVersion   String?

  // Status
  isActive Boolean  @default(true)
  lastUsed DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_devices")
}

model NotificationLog {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Notification Info
  type    String // habit_reminder, achievement_unlocked, etc.
  channel String // email, push, sms
  status  String // queued, sent, delivered, opened, clicked, failed

  // Content
  title      String?
  body       String?
  templateId String?

  // Delivery Info
  providerMessageId String?
  errorMessage      String?

  // Tracking
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?

  createdAt DateTime @default(now())

  @@map("notification_logs")
}
